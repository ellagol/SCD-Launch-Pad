<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ExplorerModule</name>
    </assembly>
    <members>
        <member name="T:ExplorerModule.FolderDetailsView">
            <summary>
            FolderDetailsView
            </summary>
        </member>
        <member name="M:ExplorerModule.FolderDetailsView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:ExplorerModule.SelectEnvironmentView">
            <summary>
            SelectEnvironmentView
            </summary>
        </member>
        <member name="M:ExplorerModule.SelectEnvironmentView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:ExplorerModule.UserCertificatesView">
            <summary>
            UserCertificatesView
            </summary>
        </member>
        <member name="M:ExplorerModule.UserCertificatesView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:ATSUI.CustomControls.AnimatedContentControl.OnApplyTemplate">
            <summary>
            This gets called when the template has been applied and we have our visual tree
            </summary>
        </member>
        <member name="M:ATSUI.CustomControls.AnimatedContentControl.OnContentChanged(System.Object,System.Object)">
            <summary>
            This gets called when the content we're displaying has changed
            </summary>
            <param name="oldContent">The content that was previously displayed</param>
            <param name="newContent">The new content that is displayed</param>
        </member>
        <member name="M:ATSUI.CustomControls.AnimatedContentControl.BeginAnimateContentReplacement">
            <summary>
            Starts the animation for the new content
            </summary>
        </member>
        <member name="M:ATSUI.CustomControls.AnimatedContentControl.CreateAnimation(System.Double,System.Double,System.EventHandler)">
            <summary>
            Creates the animation that moves content in or out of view.
            </summary>
            <param name="from">The starting value of the animation.</param>
            <param name="to">The end value of the animation.</param>
            <param name="whenDone">(optional) A callback that will be called when the animation has completed.</param>
        </member>
        <member name="M:ATSUI.CustomControls.AnimatedContentControl.CreateBrushFromVisual(System.Windows.Media.Visual)">
            <summary>
            Creates a brush based on the current appearnace of a visual element. The brush is an ImageBrush and once created, won't update its look
            </summary>
            <param name="v">The visual element to take a snapshot of</param>
        </member>
        <member name="T:ExplorerModule.BulkUpdateView">
            <summary>
            BulkUpdateView
            </summary>
        </member>
        <member name="M:ExplorerModule.BulkUpdateView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:ExplorerModule.VersionDetailsView">
            <summary>
            VersionDetailsView
            </summary>
        </member>
        <member name="M:ExplorerModule.VersionDetailsView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:ExplorerModule.StationCertificateListView">
            <summary>
            Interaction logic for StationCertificateListView.xaml
            </summary>
            <summary>
            StationCertificateListView
            </summary>
        </member>
        <member name="M:ExplorerModule.StationCertificateListView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:ExplorerModule.ContentManagementReplaceView">
            <summary>
            ContentManagementReplaceView
            </summary>
        </member>
        <member name="M:ExplorerModule.ContentManagementReplaceView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:ExplorerModule.ContentManagementView">
            <summary>
            ContentManagementView
            </summary>
        </member>
        <member name="M:ExplorerModule.ContentManagementView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:ExplorerModule.PriorityPopupView">
            <summary>
            PriorityPopupView
            </summary>
        </member>
        <member name="M:ExplorerModule.PriorityPopupView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:ExplorerModule.NewTemplateView">
            <summary>
            NewTemplateView
            </summary>
        </member>
        <member name="M:ExplorerModule.NewTemplateView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:ExplorerModule.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:ExplorerModule.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:ExplorerModule.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:ExplorerModule.EnvironmentDetailsView">
            <summary>
            EnvironmentDetailsView
            </summary>
        </member>
        <member name="M:ExplorerModule.EnvironmentDetailsView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:ExplorerModule.SearchView">
            <summary>
            SearchView
            </summary>
        </member>
        <member name="M:ExplorerModule.SearchView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:ExplorerModule.ProjectsExplorerView">
            <summary>
            ProjectsExplorerView
            </summary>
        </member>
        <member name="M:ExplorerModule.ProjectsExplorerView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:ExplorerModule.TemplateVersionDetailsView">
            <summary>
            TemplateVersionDetailsView
            </summary>
        </member>
        <member name="M:ExplorerModule.TemplateVersionDetailsView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:ExplorerModule.ProgressBarView">
            <summary>
            ProgressBarView
            </summary>
        </member>
        <member name="M:ExplorerModule.ProgressBarView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:ExplorerModule.ContentManagementFindView">
            <summary>
            ContentManagementFindView
            </summary>
        </member>
        <member name="M:ExplorerModule.ContentManagementFindView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:ExplorerModule.CloneTemplateView">
            <summary>
            CloneTemplateView
            </summary>
        </member>
        <member name="M:ExplorerModule.CloneTemplateView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:ATSUI.CustomControls.TabControlEx.OnApplyTemplate">
            <summary>
            get the ItemsHolder and generate any children
            </summary>
        </member>
        <member name="M:ATSUI.CustomControls.TabControlEx.OnItemsChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            when the items change we remove any generated panel children and add any new ones as necessary
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:ATSUI.CustomControls.TabControlEx.OnSelectionChanged(System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            update the visible child in the ItemsHolder
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:ATSUI.CustomControls.TabControlEx.GetSelectedTabItem">
            <summary>
            copied from TabControl; wish it were protected in that class instead of private
            </summary>
            <returns></returns>
        </member>
        <member name="M:ATSUI.CustomControls.TabControlEx.TabControlEx_Loaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            in some scenarios we need to update when loaded in case the 
            ApplyTemplate happens before the databind.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ATSUI.CustomControls.TabControlEx.ItemContainerGenerator_StatusChanged(System.Object,System.EventArgs)">
            <summary>
            if containers are done, generate the selected item
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ATSUI.CustomControls.TabControlEx.UpdateSelectedItem">
            <summary>
            generate a ContentPresenter for the selected item
            </summary>
        </member>
        <member name="M:ATSUI.CustomControls.TabControlEx.CreateChildContentPresenter(System.Object)">
            <summary>
            create the child ContentPresenter for the given item (could be data or a TabItem)
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:ATSUI.CustomControls.TabControlEx.FindChildContentPresenter(System.Object)">
            <summary>
            Find the CP for the given object.  data could be a TabItem or a piece of data
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:ATSUI.CustomControls.TabControlEx.GetImageOfControl(System.Windows.Controls.Control)">
            &lt;summary&gt;
            Get an ImageSource of a control
            &lt;/summary&gt;
            &lt;param name="controlToConvert"&gt;The control to convert to an ImageSource&lt;/param&gt;
            &lt;returns&gt;The returned ImageSource of the controlToConvert&lt;/returns&gt;
        </member>
        <member name="M:ATSUI.CustomControls.TabControlEx.SaveImageOfControl(System.Windows.Controls.Control,System.String)">
            &lt;summary&gt;
            Save an image of a control
            &lt;/summary&gt;
            &lt;param name="controlToConvert"&gt;The control to convert to an ImageSource&lt;/param&gt;
             /// &lt;param name="fileName"&gt;The location to save the image to&lt;/param&gt;
            &lt;returns&gt;The returned ImageSource of the controlToConvert&lt;/returns&gt;
        </member>
        <member name="T:ExplorerModule.CertificatesView">
            <summary>
            CertificatesView
            </summary>
        </member>
        <member name="M:ExplorerModule.CertificatesView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="F:ExplorerModule.ProjectDetailsViewModel._Files">
              private StringCollection _Files = new StringCollection();
                       public StringCollection Files
                       {
            
                           get
                           {
                               if (SelectedNode != null)
                               {
            
                                   if (SelectedNode.GetType() == typeof(CMTreeViewVersionNodeViewModel))
                                   {
                                       if (Versions[SelectedNode.TreeNode.ID].Files.Count > 0)
                                       {
                                           foreach (var i in Versions[SelectedNode.TreeNode.ID].Files)
                                               _Files.Add(i.Value.FileFullPath);
                                           return _Files;
                                       }
                                       return _Files;
                                   }
                                   return _Files;
                               }
                               else
                                   return _Files;
            
                           }
                       }*
        </member>
        <member name="F:ExplorerModule.NewTemplateViewModel._Files">
              private StringCollection _Files = new StringCollection();
                       public StringCollection Files
                       {
            
                           get
                           {
                               if (SelectedNode != null)
                               {
            
                                   if (SelectedNode.GetType() == typeof(CMTreeViewVersionNodeViewModel))
                                   {
                                       if (Versions[SelectedNode.TreeNode.ID].Files.Count > 0)
                                       {
                                           foreach (var i in Versions[SelectedNode.TreeNode.ID].Files)
                                               _Files.Add(i.Value.FileFullPath);
                                           return _Files;
                                       }
                                       return _Files;
                                   }
                                   return _Files;
                               }
                               else
                                   return _Files;
            
                           }
                       }*
        </member>
        <member name="T:ExplorerModule.ProjectDetailsView">
            <summary>
            ProjectDetailsView
            </summary>
        </member>
        <member name="M:ExplorerModule.ProjectDetailsView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="F:ExplorerModule.CloneTemplateViewModel._Files">
              private StringCollection _Files = new StringCollection();
                       public StringCollection Files
                       {
            
                           get
                           {
                               if (SelectedNode != null)
                               {
            
                                   if (SelectedNode.GetType() == typeof(CMTreeViewVersionNodeViewModel))
                                   {
                                       if (Versions[SelectedNode.TreeNode.ID].Files.Count > 0)
                                       {
                                           foreach (var i in Versions[SelectedNode.TreeNode.ID].Files)
                                               _Files.Add(i.Value.FileFullPath);
                                           return _Files;
                                       }
                                       return _Files;
                                   }
                                   return _Files;
                               }
                               else
                                   return _Files;
            
                           }
                       }*
        </member>
    </members>
</doc>
