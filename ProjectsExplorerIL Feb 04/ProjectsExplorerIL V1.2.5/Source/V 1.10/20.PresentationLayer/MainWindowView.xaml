<ctls:EnhancedWindowBase x:Class="ATSUI.MainWindowView"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:i="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"    
    xmlns:vm="clr-namespace:ATSVM;assembly=ATSVM"
    xmlns:ribbon="clr-namespace:Microsoft.Windows.Controls.Ribbon;assembly=RibbonControlsLibrary"
    xmlns:mvvm="clr-namespace:Infra.MVVM;assembly=Infra.MVVM"
    xmlns:local="clr-namespace:ATSUI"
    xmlns:ctls="clr-namespace:ATSUI.CustomControls"
    xmlns:conv="clr-namespace:ATSUI.Converters"
    xmlns:exp="clr-namespace:ExplorerModule;assembly=ExplorerModule"                       
    xmlns:cert="clr-namespace:UserCertModule;assembly=UserCertModule"
    xmlns:cm="clr-namespace:ContentMgmtModule;assembly=ContentMgmtModule"                        
    Title="{Binding MainWindowTitle}" Height="600" Width="800" WindowStartupLocation="CenterScreen"
    WindowState="Maximized" Icon="Resources/Icons/ATS.ico" Background="{DynamicResource DesktopBackgroundImageBrush}" 
    mvvm:CloseDialogAttached.CloseDialogFlag="{Binding CloseWindowFlag}"
    >

    <!--For the MainWindowView, we will set the DataContext in CodeBehind, to avoid activating the call to the Domain while in Design mode-->
    <!--<local:EnhancedWindowBase.DataContext>
        <vm:MainWindowViewModel />
    </local:EnhancedWindowBase.DataContext>-->

    <!-- 
    ********************************************************************
    Window Resources
    ********************************************************************
    -->
    <ctls:EnhancedWindowBase.Resources>

        <!--Resource Dictionaries-->
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <!--Workspaces Tab Control-->
                <ResourceDictionary Source="Resources/Themes/WorkspacesTabStyle.xaml" />
                <!--Metro Light themes for Core Controls-->
                <ResourceDictionary Source="Resources/Themes/CoreControls/MetroLight/MetroLight.MSControls.Core.xaml" />
                <ResourceDictionary Source="Resources/Themes/CoreControls/MetroLight/MetroLight.ListView.xaml" />
                <ResourceDictionary Source="Resources/Themes/CoreControls/MetroLight/MetroLight.Slider.xaml" />
                <!--General Application Colors-->
                <ResourceDictionary Source="Resources/Themes/Colors.xaml" />
                <!--Custom Controls-->
                <ResourceDictionary Source="Resources/Themes/CustomControlsStyles.xaml" />
                <!--Flyouts-->
                <ResourceDictionary Source="Resources/Themes/Flyout.xaml" />
                <!--Metro Tab Control-->
                <ResourceDictionary Source="Resources/Themes/MetroTabStyle.xaml" />
            </ResourceDictionary.MergedDictionaries>

            <!--Converters-->
            <conv:StringToBrushConverter x:Key="BrushConverter" />
            <conv:BoolToVisibilityConverter x:Key="VisibilityConverter" />
            <conv:IntToThicknessConverter x:Key="ThicknessConverter" />

            <!--Attach View and ViewModels of workspaces and overlays used in the application-->
            <DataTemplate DataType="{x:Type vm:LoginViewModel}">
                <AdornerDecorator>
                    <local:LoginView/>
                </AdornerDecorator>
            </DataTemplate>
            <DataTemplate DataType="{x:Type exp:StationCertificateListViewModel}">
                <AdornerDecorator>
                    <exp:StationCertificateListView />
                </AdornerDecorator>
            </DataTemplate>
            <DataTemplate DataType="{x:Type vm:AboutViewModel}">
                <AdornerDecorator>
                    <local:AboutView/>
                </AdornerDecorator>
            </DataTemplate>
            <DataTemplate DataType="{x:Type vm:WorkspacesViewModel}">
                <AdornerDecorator>
                    <local:WorkspacesView/>
                </AdornerDecorator>
            </DataTemplate>
            <DataTemplate DataType="{x:Type vm:ErrorLogViewModel}">
                <AdornerDecorator>
                    <local:ErrorLogView />
                </AdornerDecorator>
            </DataTemplate>
            <DataTemplate DataType="{x:Type exp:ProjectsExplorerViewModel}">
                <AdornerDecorator>
                    <exp:ProjectsExplorerView />
                </AdornerDecorator>
            </DataTemplate>           
            <DataTemplate DataType="{x:Type exp:ContentManagementViewModel}">
                <AdornerDecorator>
                    <exp:ContentManagementView />
                </AdornerDecorator>
            </DataTemplate>
            <DataTemplate DataType="{x:Type exp:ContentManagementFindViewModel}">
                <AdornerDecorator>
                    <exp:ContentManagementFindView />
                </AdornerDecorator>
            </DataTemplate>
            <DataTemplate DataType="{x:Type exp:ContentManagementReplaceViewModel}">
                <AdornerDecorator>
                    <exp:ContentManagementReplaceView />
                </AdornerDecorator>
            </DataTemplate>
            <DataTemplate DataType="{x:Type exp:CertificatesViewModel}">
                <AdornerDecorator>
                    <exp:CertificatesView />
                </AdornerDecorator>
            </DataTemplate>
            <DataTemplate DataType="{x:Type exp:UserCertificatesViewModel}">
                <AdornerDecorator>
                    <exp:UserCertificatesView />
                </AdornerDecorator>
            </DataTemplate>
            <DataTemplate DataType="{x:Type exp:SearchViewModel}">
                <AdornerDecorator>
                    <exp:SearchView />
                </AdornerDecorator>
            </DataTemplate>
            <DataTemplate DataType="{x:Type cert:UsersCertificatesViewModel}">
                <AdornerDecorator>
                    <cert:UsersCertificatesView />
                </AdornerDecorator>
            </DataTemplate>
            <DataTemplate DataType="{x:Type cm:CMContentManagementViewModel}">
                <AdornerDecorator>
                    <cm:CMContentManagementView/>
                </AdornerDecorator>
            </DataTemplate>
            <DataTemplate DataType="{x:Type cm:CMSearchViewModel}">
                <AdornerDecorator>
                    <cm:CMSearchView/>
                </AdornerDecorator>
            </DataTemplate>
            <DataTemplate DataType="{x:Type cm:CMProgressBarViewModel}">
                <AdornerDecorator>
                    <cm:CMProgressBarView/>
                </AdornerDecorator>
            </DataTemplate>


        </ResourceDictionary>

    </ctls:EnhancedWindowBase.Resources>

    <!-- 
    ********************************************************************
    Flyouts
    ********************************************************************
    -->
    <ctls:EnhancedWindowBase.Flyouts>
        <ctls:Flyout x:Name="LeftF" Header="Workspaces" position="Left" IsOpen="{Binding Path=LeftFlyoutOpen}" Background="SteelBlue" >
            <Grid Width="400">
                <ListBox x:Name="WorkspacesList" ItemsSource="{Binding Workspaces}" SelectedItem="{Binding SelectedWorkspace, Mode=TwoWay}" Margin="15"
                     ScrollViewer.HorizontalScrollBarVisibility="Disabled" HorizontalAlignment="Center" Background="Transparent" >
                    <ListBox.ItemsPanel>
                        <ItemsPanelTemplate>
                            <WrapPanel ItemHeight="143" ItemWidth="341" Orientation="Horizontal" />
                        </ItemsPanelTemplate>
                    </ListBox.ItemsPanel>
                    <ListBox.ItemContainerStyle>
                        <Style BasedOn="{StaticResource {x:Type ListBoxItem}}" TargetType="{x:Type ListBoxItem}" >
                            <Setter Property="mvvm:EventToCommand.Event" Value="MouseDoubleClick" />
                            <Setter Property="mvvm:EventToCommand.Command" Value="{Binding Path=DataContext.WorkspacesListDoubleClickCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ctls:EnhancedWindowBase}}}" />
                            <Setter Property="mvvm:EventToCommand.CommandParameter" Value="{Binding}" />
                        </Style>
                    </ListBox.ItemContainerStyle>
                    <ListBox.ItemTemplate>
                        <DataTemplate>
                            <StackPanel Margin="20" HorizontalAlignment="Center">
                                <Viewbox>
                                    <Grid x:Name="backgroundGrid" >
                                        <Rectangle x:Name="Rect" Fill="{DynamicResource WorkspacesBackgroundBrush}" />
                                        <Image Source="{Binding Thumb}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" />
                                    </Grid>
                                </Viewbox>
                            </StackPanel>
                        </DataTemplate>
                    </ListBox.ItemTemplate>
                </ListBox>
            </Grid>
        </ctls:Flyout>
        <ctls:Flyout x:Name="TopF" Header="Top Flyout" position="Top" IsOpen="{Binding Path=TopFlyoutOpen}" Background="SteelBlue" >
            <Grid Height="100">
                <TextBlock Text="Testing a Top Flyout" HorizontalAlignment="Center" />
            </Grid>
        </ctls:Flyout>
        <ctls:Flyout x:Name="RightF" Header="{Binding Path=RightFlyoutTitle}" position="Right" IsOpen="{Binding Path=RightFlyoutOpen}" Background="SteelBlue" >
            <Grid Width="400">
                <!--Content View-->
                <ContentControl Content="{Binding RightFlyoutViewModel, Mode=OneWay}" />
            </Grid>
        </ctls:Flyout>
        <ctls:Flyout x:Name="BottomF" Header="{Binding Path=BottomFlyoutTitle}" position="Bottom" IsOpen="{Binding Path=BottomFlyoutOpen}" Background="SteelBlue" >
            <Grid Height="200">
                <!--Content View-->
                <ContentControl Content="{Binding BottomFlyoutViewModel, Mode=OneWay}" />
            </Grid>
        </ctls:Flyout>
    </ctls:EnhancedWindowBase.Flyouts>

    <!-- 
    ********************************************************************
    Main Window Area: Ribbon; WorkspacesTab; StatusBar; Overlay
    ********************************************************************
    -->
    <Grid x:Name="LayoutRoot">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="30"/>
        </Grid.RowDefinitions>

        <!--Flyouts-->
        <ItemsControl Grid.Row="0" Grid.RowSpan="3" Panel.ZIndex="2" KeyboardNavigation.TabNavigation="None" VerticalAlignment="Stretch"
                      ItemsSource="{Binding Flyouts, Mode=OneWay, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ctls:EnhancedWindowBase}}}">
            <ItemsControl.ItemsPanel>
                <ItemsPanelTemplate>
                    <Grid TextElement.Foreground="White" />
                </ItemsPanelTemplate>
            </ItemsControl.ItemsPanel>
        </ItemsControl>

        <!-- 
        ********************************************************************
        Ribbon
        ********************************************************************
        -->
        <Border Grid.Row="0" Background="Transparent" BorderBrush="Transparent" BorderThickness="0" SnapsToDevicePixels="True" Margin="0,-22,0,0">
            <ribbon:Ribbon x:Name="Ribbon" >
                <ribbon:Ribbon.ApplicationMenu>
                    <ribbon:RibbonApplicationMenu SmallImageSource="Resources\Icons\16x16\NoIcon.png" >
                        <!--Since SCD do not want a Login screen, we can't implement the Lock Screen feature-->
                        <!--<ribbon:RibbonApplicationMenuItem Header="Lock Screen" ImageSource="Resources\Icons\32x32\Lock.png" Command="{Binding ShowLoginCommand}" />-->
                        <ribbon:RibbonApplicationMenuItem Header="Exit Application" ImageSource="Resources\Icons\32x32\ShutDown.png" Command="{Binding ExitApplicationCommand}" />
                    </ribbon:RibbonApplicationMenu>
                </ribbon:Ribbon.ApplicationMenu>
                <ribbon:RibbonTab Header="Home">
                    <ribbon:RibbonGroup Header="Exit">
                        <ribbon:RibbonButton LargeImageSource="Resources\Icons\32x32\ShutDown.png" SmallImageSource="Resources\Icons\16x16\ShutDown.png" Label="Exit Application" Command="{Binding ExitApplicationCommand}" />
                        <!--Since SCD do not want a Login screen, we can't implement the Lock Screen feature-->
                        <!--<ribbon:RibbonButton LargeImageSource="Resources\Icons\32x32\Lock.png" SmallImageSource="Resources\Icons\16x16\Lock.png" Label="Lock Screen" Command="{Binding ShowLoginCommand}" />-->
                    </ribbon:RibbonGroup>
                    <ribbon:RibbonGroup Header="Explorer">
                        <ribbon:RibbonButton LargeImageSource="Resources\Icons\32x32\Explorer.png" Label="Projects Explorer" 
                                             Command="{Binding ProjectsExplorerCommand}" IsEnabled="{Binding isOpenWorkspaceEnabled}"/>
                        <!--Since SCD do not want a Login screen, we can't implement the Lock Screen feature-->
                        <!--<ribbon:RibbonButton LargeImageSource="Resources\Icons\32x32\Lock.png" SmallImageSource="Resources\Icons\16x16\Lock.png" Label="Lock Screen" Command="{Binding ShowLoginCommand}" />-->
                    </ribbon:RibbonGroup>
                    <ribbon:RibbonGroup Header="Certificates">
                        <ribbon:RibbonButton LargeImageSource="Resources\Icons\32x32\Certificate.png" Label="Users Certificates" 
                                             Command="{Binding UsersCertificatesCommand}" IsEnabled="{Binding isOpenWorkspaceEnabled}"/>
                        <!--Since SCD do not want a Login screen, we can't implement the Lock Screen feature-->
                        <!--<ribbon:RibbonButton LargeImageSource="Resources\Icons\32x32\Lock.png" SmallImageSource="Resources\Icons\16x16\Lock.png" Label="Lock Screen" Command="{Binding ShowLoginCommand}" />-->
                    </ribbon:RibbonGroup>
                    <ribbon:RibbonGroup Header="Cm">
                        <ribbon:RibbonButton LargeImageSource="Resources\Icons\32x32\Content.png" Label="Content Management" 
                                             Command="{Binding ContentManagementCommand}" IsEnabled="{Binding isOpenWorkspaceEnabled}"/>
                        <!--Since SCD do not want a Login screen, we can't implement the Lock Screen feature-->
                        <!--<ribbon:RibbonButton LargeImageSource="Resources\Icons\32x32\Lock.png" SmallImageSource="Resources\Icons\16x16\Lock.png" Label="Lock Screen" Command="{Binding ShowLoginCommand}" />-->
                    </ribbon:RibbonGroup>
                    <ribbon:RibbonGroup Header="About">
                        <ribbon:RibbonButton LargeImageSource="Resources\Icons\32x32\about.png" Label="About" 
                                             Command="{Binding ShowAboutCommand}" />
                        <!--Since SCD do not want a Login screen, we can't implement the Lock Screen feature-->
                        <!--<ribbon:RibbonButton LargeImageSource="Resources\Icons\32x32\Lock.png" SmallImageSource="Resources\Icons\16x16\Lock.png" Label="Lock Screen" Command="{Binding ShowLoginCommand}" />-->
                    </ribbon:RibbonGroup>
                </ribbon:RibbonTab>
                <ribbon:RibbonTab Header="Shell">
                    <!--The below is just for demo; you should open\close Flyouts from your application logic-->
                    <!--<ribbon:RibbonGroup Header="Flyouts">
                        <ribbon:RibbonButton LargeImageSource="Resources\Icons\32x32\NoIcon.png" SmallImageSource="Resources\Icons\16x16\NoIcon.png" Label="Left Flyout" Command="{Binding ToggleLeftFlyoutCommand}" />
                        <ribbon:RibbonButton LargeImageSource="Resources\Icons\32x32\NoIcon.png" SmallImageSource="Resources\Icons\16x16\NoIcon.png" Label="Top Flyout" Command="{Binding ToggleTopFlyoutCommand}" />
                        <ribbon:RibbonButton LargeImageSource="Resources\Icons\32x32\NoIcon.png" SmallImageSource="Resources\Icons\16x16\NoIcon.png" Label="Right Flyout" Command="{Binding ToggleRightFlyoutCommand}" />
                        <ribbon:RibbonButton LargeImageSource="Resources\Icons\32x32\NoIcon.png" SmallImageSource="Resources\Icons\16x16\NoIcon.png" Label="Bottom Flyout" Command="{Binding ToggleBottomFlyoutCommand}" />
                    </ribbon:RibbonGroup>-->
                    <ribbon:RibbonGroup Header="Workspaces">
                        <ribbon:RibbonButton LargeImageSource="Resources\Icons\32x32\NoIcon.png" SmallImageSource="Resources\Icons\16x16\NoIcon.png" Label="View" Command="{Binding WorkspacesCommand}" />
                        <ribbon:RibbonButton LargeImageSource="Resources\Icons\32x32\NoIcon.png" SmallImageSource="Resources\Icons\16x16\NoIcon.png" Label="Charm" Command="{Binding WorkspacesFlyoutCommand}" />
                        <ribbon:RibbonButton LargeImageSource="Resources\Icons\32x32\NoIcon.png" SmallImageSource="Resources\Icons\16x16\NoIcon.png" Label="Close All" Command="{Binding CloseAllWorkspacesCommand}" />
                        <ribbon:RibbonButton LargeImageSource="Resources\Icons\32x32\NoIcon.png" SmallImageSource="Resources\Icons\16x16\NoIcon.png" Label="Close All Other" Command="{Binding CloseOtherWorkspacesCommand}" />
                    </ribbon:RibbonGroup>
                    <ribbon:RibbonGroup Header="General">
                        <ribbon:RibbonButton LargeImageSource="Resources\Icons\32x32\Log.png" SmallImageSource="Resources\Icons\16x16\Log.png" Label="View Log" Command="{Binding ViewErrorLogCommand}" />
                    </ribbon:RibbonGroup>
                </ribbon:RibbonTab>
            </ribbon:Ribbon>
        </Border>

        <!-- 
        ********************************************************************
        Workspaces area
        ********************************************************************
        -->
        <ContentControl Grid.Row="1" Grid.Column="0" Margin="{Binding WorkspacesMargin, Converter={StaticResource ThicknessConverter}}">
            <ctls:TabControlEx x:Name="tabControl" IsSynchronizedWithCurrentItem="True" ItemsSource="{Binding Path=Workspaces}" SelectedIndex="{Binding Path=CurrentWorkspace, Mode=TwoWay}"
                                Visibility="{Binding IsWorkspacesTabVisible, Converter={StaticResource VisibilityConverter}, ConverterParameter=True}" Template="{DynamicResource WorkspacesTabControl}">
                <TabControl.LayoutTransform>
                    <!-- Allows to zoom the control's content using the slider -->
                    <ScaleTransform CenterX="0" CenterY="0"
                         ScaleX="{Binding ElementName=Magnifier,Path=Value}"
                         ScaleY="{Binding ElementName=Magnifier,Path=Value}"/>
                </TabControl.LayoutTransform>

            </ctls:TabControlEx>
        </ContentControl>

        <!-- 
        ********************************************************************
        StatusBar
        ********************************************************************
        -->
        <Grid Grid.Row="2">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="60" />
                <ColumnDefinition Width="150" />
            </Grid.ColumnDefinitions>

            <!--StatusBar-->
            <Border Grid.Column="0" BorderThickness="0" BorderBrush="Transparent" Background="{Binding StatusBackgroundBrush, Converter={StaticResource BrushConverter}, ConverterParameter=True}" >
                <Label Content="{Binding StatusMessage}" HorizontalAlignment="Left" VerticalAlignment="Center" VerticalContentAlignment="Center"  Foreground="{Binding StatusForegroundBrush, Converter={StaticResource BrushConverter}, ConverterParameter=True}" />
            </Border>
            <!--Tab Width Buttons-->
            <Border Grid.Column="1" BorderThickness="0" BorderBrush="Transparent" Background="{Binding StatusBackgroundBrush, Converter={StaticResource BrushConverter}, ConverterParameter=True}" >
                <StackPanel Orientation="Horizontal" >
                    <RepeatButton Content="&lt;" Interval="200" ToolTip="Decrease Workspaces Headers Width" Command="{Binding DecreaseWorkspacesTabItemWidthCommand}" />
                    <RepeatButton Content="&gt;" Interval="200" ToolTip="Increase Workspaces Headers Width" Command="{Binding IncreaseWorkspacesTabItemWidthCommand}" />
                </StackPanel>
            </Border>
            <!--Zoom Slider-->
            <Border Grid.Column="2" BorderThickness="0" BorderBrush="Transparent" Background="{Binding StatusBackgroundBrush, Converter={StaticResource BrushConverter}, ConverterParameter=True}" >
                <Slider x:Name="Magnifier" Orientation="Horizontal" ToolTip="Drag the slider to change the zoom-level ..." SmallChange="0.01" LargeChange="0.1"
                Minimum="0.5" Maximum="1.5" Value="1" Margin="5,7,10,5" />
            </Border>
            <!--ResizeGrip -->
            <ResizeGrip x:Name="WindowResizeGrip" Grid.Column="2" HorizontalAlignment="Right" IsTabStop="False" VerticalAlignment="Bottom" Foreground="{DynamicResource BackgroundBrush}"/>
        </Grid>


        <!-- 
        ********************************************************************
        Overlay (Used for Login, About, etc.)
        ********************************************************************
        -->
        <!--The following ContentControl (controlled by BoolToVisibilityConverter) was further replaced by an animated one-->
        <!--<ContentControl Grid.Row="0" Grid.RowSpan="3" Content="{Binding OverlayContentViewModel, Mode=OneWay}" Visibility="{Binding ShowOverlayContent, Converter={StaticResource VisibilityConverter}, ConverterParameter=True}"/>-->
        <!--The following is an Animated ContentControl (Instead of the non-animated above)-->
        <ctls:AnimatedContentControl Grid.Row="0" Grid.RowSpan="3" Content="{Binding OverlayContentViewModel, Mode=OneWay}" Style="{DynamicResource AnimatedContentControlStyle}" Visibility="{Binding ShowOverlayContent, Converter={StaticResource VisibilityConverter}, ConverterParameter=True}" />

    </Grid>

</ctls:EnhancedWindowBase>

